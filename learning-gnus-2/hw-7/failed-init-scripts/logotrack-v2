#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          logotrack
# Required-Start:    $remote_fs $syslog $time
# Required-Stop:     $remote_fs $syslog $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Default-Stop:
# Short-Description: Track login session for a user
# Description:       logotrack is a UNIX program for tracking the logging sessions of
#					 a specified user. It runs at regular time intervals and logs the
# 					 number of sessions.
### END INIT INFO

# Using the lsb functions to perform the operations.
. /lib/lsb/init-functions

PATH=/bin:/usr/bin:/sbin:/usr/sbin
DESC="logotrack daemon"
NAME=logotrack
DAEMON=/usr/bin/logotrack
PIDFILE=/var/run/logotrack.pid
SCRIPTNAME=/etc/init.d/"$NAME"

# If the daemon is not there, then exit.
test -x $DAEMON || exit 5

case $1 in
start)
	# Checked the PID file exists and check the actual status of process
	if [ -e $PIDFILE ]; then
		status_of_proc --background --make-pidfile -p  $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
		# If the status is SUCCESS then don't need to start again.
		if [ $status = "0" ]; then
			exit # Exit
		fi
	fi
	# Start the daemon.
	log_daemon_msg "Starting the process" "$NAME"
	# Start the daemon with the help of start-stop-daemon
	# Log the message appropriately
	if s--background --start --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
stop)
	# Stop the daemon.
	if [ -e $PIDFILE ]; then
		status_of_proc -p $PIDFILE $DAEMON "Stoppping the $NAME process" && status="0" || status="$?"
		if [ "$status" = 0 ]; then
			start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE
			/bin/rm -rf $PIDFILE
		fi
	else
		log_daemon_msg "$NAME process is not running"
		log_end_msg 0
	fi
	;;
restart)
	# Restart the daemon.
	stop && sleep 2 && $0 start
	;;
status)
	# Check the status of the process.
	if [ -e $PIDFILE ]; then
		status_of_proc -p $PIDFILE $DAEMON "$NAME process" && exit 0 || exit $?
	else
		log_daemon_msg "$NAME Process is not running"
		log_end_msg 0
	fi
	;;
reload)
	# Reload the process. Basically sending some signal to a daemon to reload
	# it configurations.
	if [ -e $PIDFILE ]; then
		start-stop-daemon --stop --signal USR1 --quiet --pidfile $PIDFILE --name $NAME
		log_success_msg "$NAME process reloaded successfully"
	else
		log_failure_msg "$PIDFILE does not exists"
	fi
	;;
*)
	# For invalid arguments, print the usage message.
	echo "Usage: $0 {start|stop|restart|reload|status}"
	exit 2
	;;
esac
