Прости числа
=============

Най бързия начин е ератостен - по бързо
Другия начин е sqrt алгоритъма
булев масив
вървим по масива и ако срещнем просто всяко следваща негова стъпка я отбелязваме че не е проста
тръгваме от две

memser(int [], 1, sizeof(erat)) -> попълва байт по байт 000000010000001 - 256, коеот не е едно
memset може да се използва с 0 и с -1

```
vector < int > p;
bool erat[1<<20]
int fill()
{
  memset(erat, 1, sizeof(erat)); // инициализираме
  erat [0] = erat[1] = false;
  for(int i = 2; i <= (1<<20); ++i)
  {
    if(erat[i]) conntinue;
    p.push_back(i);
    for(int j = 2*i; j < (1 << 20); j+=i) erat[j] = false;
  }
}

Има две оптимизации
bool erat[1<<20]
int fill()
{
  memset(erat, 1, sizeof(erat)); // инициализираме
  erat [0] = erat[1] = false;
  for(int i = 2; i * i <= (1<<20); ++i)
  {
    if(erat[i]) conntinue;
    p.push_back(i);
    for(int j = i * i; j < (1 << 20); j+=i) erat[j] = false;
  }
}
```
Може да се оптимизира като започнем от i*i  но ако използваме само нея програма ни е грешна.
Проблема е че ако почнем от i*i ще излезем от размера на int. Трябва да се внимава, да не
overflow-не. На нас няма да ни е нужно да минаваме по всички стойности.

Факторизация
============

Имаме число
искаме да намерим простите му множители.
Почваме да вървим по простите числа от решето
Всеки път като се дели го делим
Това продължавам докато стигнем до корен квадратен от числото, което факторизираме
Ако не намерим някое, което се дели значи всичките са прости.
За целта е нужно да си генерираме число до 1 милион.

Бързо Вдигане на степен
====
a^n = (a ^2)^(n/2)
Алгоритъмът работи с логаримична сложност.
```
#define MOD 100000000007;
typedef long long ll;
//Хабаво е числото да е взаимно просто със вскички по малки от него числа.

ll qpow(ll a, ll n))
{
  if(n == 0) return 1;
  if(n % 2 == 0) return a * qpow(a, n -1) % MOD;
  return qpow((a*a) %MOD, n/2);
}

Тук рекурсията е линейна
Следователно изобщо не е необходима рекурсия.

42 в двоично предсавяне 101010

Някое число а трябва да вдигнем на степен 42
За да го вдигнем на степeн

Предтавяме числото.
Използвайки ч

a * a = a^2
a^2 * a^2 = a^4
a^4 * a^4 = a^8

```
ll qpow(ll a, ll n)
{
  ll res = 1;
  while(n > 0)
  {
    if(n % 2 == 1)
      res = (res * a) % MOD;
      n--;
  } else   {
    n /= 2;
    a = (a*a);
  }
  return res;
}
```

a/b = a*b  ^ (mod - 2
MOD - голямо просто просто
Итерираме по всички възможни остатъци във някакъв ред. Когато е на степен модула се получава себе с
Когао е на степен модул - 1 ще даде 1

2 ^ 6  = 64 % 7 = 1

b ^ (-1)*b = b ^ (MODE - 1)
b^-1 = b ^ (MOD - 2)
=======
при гъст граф, тогава е по добре n^2++
рехав - prioriyt queue
=======
Защо бихме имали много измерения - за да пазим
Динамично оптимиране ни спестява памет за нещо, което вечме сме смятали.
АКо имаме двумерен масив.

```
int f(n, m)
{

  int &res = dyn[n][m];
  if(res!=-1) return res;
  if(dyn[n][m] == -1) return
  res = ...
}



Динамично оптимиране
=========
Идеята е да не изчисляваме едно число повече от веднъж
```

int fib(int n)
{
  if(n <= 2)
    return 1;
  return fib(n - 2) + fib(n - 1);
}
```

Като стигнем 7 -1 се бави. При по големите числа вече почва много да се бави

Викаме го за числото
```
                                        7
                5                                          6
         3           4                            4                5
1        2       2      3                    2        3         4      3
                     1     2                       1     2           1     2

```
Можем да запематяваме досега изчислените стойнисти.
Има друг начин за смятане на тази функция
```
int dyn[M] //инициализираме го с -1 предварително
int fib(int n)
{
  if(dyn[n]!=-1) return dyn[n];
  if(n <= 2) return 1;
  return dyn[m] =  fib(n - 2) + fib(n - 1);
}
```
В конкретния случай числата бързо нарастват
Примерна задача е да се търси остатъка по деление на някакво число на фибоначи
Примерн търсим остатък при деление на 10, който остава при 1000 число на фибоначи
Това се базира на
```
(a * b) % d = ((a % d) * (b % d)) %d

((a%d)*(b%d))%d

((a%d) * (b^(d-2)) %d) = (a/b) mod d
```


Фибоначи със динамично.
Динамичното оптимиране се използва, когато едно функция се вика себе си повече от веднъж при рекурсиял
```
int dynn[M]
dyn[1] = dyn[2] = 1;
for(int i = 3; i < M; i++)
{
  dyn[i] = (dyn[i - 2] + dyn[i - 1]) %MOD;
}
```

по колко начина можем да стигнем от (si, sj) до (fi, fj)
Задачата трабва да може да се раздели на подзадачи
Трябва да е дърво. Не трябва да има цикъл.
Трябва винаги да се отива в по малки подзадачи.
Подзадачата е в тази матрица как да стигна от горния горния до долния

_________
| | | | |
---------
| | | | |
---------
| | | | |
---------
| | | | |
_________

Винаги трябва да отиваме в по малка задача. Само по един начин може да се стигне.
Първо пиша рекурсивното решение
Тоя дето от дясно.
